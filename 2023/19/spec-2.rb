require File.join(__dir__, 'solution-2')

RSpec.describe Solution2 do
  let(:raw_workflows_and_parts) { [
    {
      px:  ['a<2006:qkq', 'm>2090:A', 'rfg'],
      pv:  ['a>1716:R', 'A'],
      lnx: ['m>1548:A', 'A'],
      rfg: ['s<537:gd', 'x>2440:R', 'A'],
      qs:  ['s>3448:A', 'lnx'],
      qkq: ['x<1416:A', 'crn'],
      crn: ['x>2662:A', 'R'],
      in:  ['s<1351:px', 'qqz'],
      qqz: ['s>2770:qs', 'm<1801:hdj', 'R'],
      gd:  ['a>3333:R', 'R'],
      hdj: ['m>838:A', 'pv'],
    },
    [
      {x: 787, m: 2655, a: 1222, s: 2876},
      {x: 1679, m: 44, a: 2067, s: 496},
      {x: 2036, m: 264, a: 79, s: 2244},
      {x: 2461, m: 1339, a: 466, s: 291},
      {x: 2127, m: 1623, a: 2188, s: 1013},
    ]
  ] }

  it 'can build a graph of the workflow' do
    expect(described_class.new(raw_workflows_and_parts).graph).to eq({
      's<1351' => {
        'a<2006' => {
          'x<1416' => 'A',
          '*' => {
            'x>2662' => 'A',
            '*' => 'R'
          }
        },
        'm>2090' => 'A',
        '*' => {
          's<537' => {
            'a>3333' => 'R',
            '*' => 'R'
          },
          'x>2440' => 'R',
          '*' => 'A'
        }
      },
      '*' => {
        's>2770' => {
          's>3448' => 'A',
          '*' => {
            'm>1548' => 'A',
            '*' => 'A'
          }
        },
        'm<1801' => {
          'm>838' => 'A',
          '*' => {
            'a>1716' => 'R',
            '*' => 'A'
          }
        },
        '*' => 'R'
      },
    })
  end

  it 'can build a graph of the workflow with split ranges' do
    expect(described_class.new(raw_workflows_and_parts).split_graph).to eq({
      {x: 1..4_000, m: 1..4_000, a: 1..4_000, s: 1..1350} => {
        {x: 1..4_000, m: 1..4_000, a: 1..2005, s: 1..1350} => {
          {x: 1..1415, m: 1..4_000, a: 1..2005, s: 1..1350} => 'A',
          {x: 1416..4_000, m: 1..4_000, a: 1..2005, s: 1..1350} => {
            {x: 2663..4_000, m: 1..4_000, a: 1..2005, s: 1..1350} => 'A',
            {x: 1416..2662, m: 1..4_000, a: 1..2005, s: 1..1350} => 'R'
          }
        },
        {x: 1..4_000, m: 2091..4_000, a: 2006..4_000, s: 1..1350} => 'A',
        {x: 1..4_000, m: 1..2090, a: 2006..4_000, s: 1..1350} => {
          {x: 1..4_000, m: 1..2090, a: 2006..4_000, s: 1..536} => {
            {x: 1..4_000, m: 1..2090, a: 3334..4_000, s: 1..536} => 'R',
            {x: 1..4_000, m: 1..2090, a: 2006..3333, s: 1..536} => 'R'
          },
          {x: 2441..4_000, m: 1..2090, a: 2006..4_000, s: 537..1350} => 'R',
          {x: 1..2440, m: 1..2090, a: 2006..4_000, s: 537..1350} => 'A'
        }
      },
      {x: 1..4_000, m: 1..4_000, a: 1..4_000, s: 1351..4_000} => {
        {x: 1..4_000, m: 1..4_000, a: 1..4_000, s: 2771..4_000} => {
          {x: 1..4_000, m: 1..4_000, a: 1..4_000, s: 3449..4_000} => 'A',
          {x: 1..4_000, m: 1..4_000, a: 1..4_000, s: 2771..3448} => {
            {x: 1..4_000, m: 1549..4_000, a: 1..4_000, s: 2771..3448} => 'A',
            {x: 1..4_000, m: 1..1548, a: 1..4_000, s: 2771..3448} => 'A'
          }
        },
        {x: 1..4_000, m: 1..1800, a: 1..4_000, s: 1351..2770} => {
          {x: 1..4_000, m: 839..1800, a: 1..4_000, s: 1351..2770} => 'A',
          {x: 1..4_000, m: 1..838, a: 1..4_000, s: 1351..2770} => {
            {x: 1..4_000, m: 1..838, a: 1717..4_000, s: 1351..2770} => 'R',
            {x: 1..4_000, m: 1..838, a: 1..1716, s: 1351..2770} => 'A'
          }
        },
        {x: 1..4_000, m: 1801..4_000, a: 1..4_000, s: 1351..2770} => 'R'
      },
    })
  end

  it 'extracts the "A" nodes' do
    expect(described_class.new(raw_workflows_and_parts).accepted_ranges).to eq([
      {x: 1..1415, m: 1..4_000, a: 1..2005, s: 1..1350},
      {x: 2663..4_000, m: 1..4_000, a: 1..2005, s: 1..1350},
      {x: 1..4_000, m: 2091..4_000, a: 2006..4_000, s: 1..1350},
      {x: 1..2440, m: 1..2090, a: 2006..4_000, s: 537..1350},
      {x: 1..4_000, m: 1..4_000, a: 1..4_000, s: 3449..4_000},
      {x: 1..4_000, m: 1549..4_000, a: 1..4_000, s: 2771..3448},
      {x: 1..4_000, m: 1..1548, a: 1..4_000, s: 2771..3448},
      {x: 1..4_000, m: 839..1800, a: 1..4_000, s: 1351..2770},
      {x: 1..4_000, m: 1..838, a: 1..1716, s: 1351..2770}
    ])
  end

  it 'gives the correct solution for the examples' do
    expect(described_class.new(raw_workflows_and_parts).result).to eq 167409079868000
  end
end
